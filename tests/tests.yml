-   name: IF THEN CMD
    input: |
        if true; then
        echo hello
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF THEN ELSE
    input: |
        if true; then
        echo true
        else
        echo false
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF THEN ELIF THEN ELSE
    input: |
        if true; then
        echo true
        elif true; then
        echo coucou
        else
        echo false
        fi
    checks:
    -   stdout
    -   exitcode

-   name: REDIR DEV NULL
    input: |
        echo test >/dev/null
    checks:
    -   stdout
    -   exitcode

-   name: REDIR DEV NULL APPENDED
    input: |
        echo test2>/dev/null
    checks:
    -   stdout
    -   exitcode

-   name: REDIR 2 INTO DEV NULL
    input: |
        echo test 2>/dev/null
    checks:
    -   stdout
    -   exitcode

-   name: REDIR IF ECHO IN &2
    input: |
        if true; then
        echo test
        fi >&2
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE ECHO TR PIPE
    input: |
        echo hello | tr e a
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE &&
    input: |
        echo test && echo coucou
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE ||
    input: |
        echo test || echo coucou
    checks:
    -   stdout
    -   exitcode

-   name: IF TRUE || FALSE
    input: |
        if true || false; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF FALSE || TRUE
    input: |
        if false || true; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF TRUE && FALSE
    input: |
        if true && false; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF FALSE && TRUE
    input: |
        if false && true; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF TRUE && TRUE && FALSE
    input: |
        if true && true && false; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF FALSE || FALSE || FALSE
    input: |
        if false || false || false; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF FALSE || FALSE || TRUE
    input: |
        if false || false || true; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF FALSE ||| TRUE
    input: |
        if false ||| true; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: PIPE MISSING RIGHT
    input: |
        echo test |
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: PIPE MISSING LEFT
    input: |
        | tr a e
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: IF LS && ECHO TRUE
    input: |
        if ls && echo true; then
        echo test
        fi
    checks:
    -   stdout
    -   exitcode

-   name: IF FALSE || ECHO YES THEN PWD || FALSE && ECHO OUI
    input: |
        if false || echo yes; then
        pwd || false && echo OUI
        fi
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE WHILE
    input: |
        touch coucou
        while rm coucou; do
        echo test
        done
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE UNTIL
    input: |
        until rm coucou; do
        touch coucou
        done
    checks:
    -   stdout
    -   exitcode

-   name: IF IN WHILE
    input: |
        touch coucou
        while rm coucou; do
        if true; then
        echo oui
        fi
        done
    checks:
    -   stdout
    -   exitcode

-   name: WHILE MISSING DO
    input: |
        touch coucou
        while rm coucou;
        if true; then
        echo oui
        fi
        done
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: WHILE MISSING DONE
    input: |
        touch coucou
        while rm coucou; do
        if true; then
        echo oui
        fi
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: FOR WITHOUT VAR EXP
    input: |
        for i in test coucou; do
        echo oui
        done
    checks:
    -   stdout
    -   exitcode

-   name: FOR WITH ONE VAR EXP
    input: |
        for i in test coucou; do
        echo "$i"
        done
    checks:
    -   stdout
    -   exitcode

-   name: FOR WITH TWO VAR EXP
    input: |
        for i in test coucou; do
        echo "$i" hello "$i" cc
        done
    checks:
    -   stdout
    -   exitcode

-   name: FOR WITH ONE {VAR} EXP
    input: |
        for i in test coucou; do
        echo "${i}"
        done
    checks:
    -   stdout
    -   exitcode

-   name: FOR MISSING VAR
    input: |
        for in test coucou; do
        echo "$i" hello "$icc" "${i}" "${i}"abc "$iabc""${i}"def
        done
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: FOR MISSING IN
    input: |
        for i test coucou; do
        echo "$i" hello "$icc" "${i}" "${i}"abc "$iabc""${i}"def
        done
    checks:
    -   stdout
    -   exitcode
    -   has_stderr

-   name: FOR MISSING DONE
    input: |
        for i test coucou; do
        echo "$i" hello "$icc" "${i}" "${i}"abc "$iabc""${i}"def
    checks:
    -   stdout
    -   exitcode
    -   has_stderr
#
#-   name: FOR HARD
#    input: |
#        for i in test coucou; do
#        echo $i hello $icc ${i} ${i}abc $iabc${i}def
#        done
#    checks:
#    -   stdout
#    -   exitcode

-   name: SIMPLE LEFT REDIR
    input: |
        echo Hello > file
        cat file
        rm file
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE LEFT COMMAND STDERR REDIR
    input: |
        ls unknown 2>file
        cat file
        rm file
    checks:
        -   stdout
        -   exitcode

-   name: SIMPLE REDIRECTION WITH CANCEL
    input: |
        echo test > file; echo world
        cat file
        rm file
    checks:
        -   stdout
        -   exitcode
        -
-   name: DOUBLE LEFT REDIR
    input: |
        echo Hello > file > file2
        cat file2
        rm file
        rm file2
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE RIGHT REDIR
    input: |
        echo Hello > file
        cat < file
        rm file
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE RIGHT REDIR
    input: |
        echo Hello > file
        cat < file
        rm file
    checks:
    -   stdout
    -   exitcode

-   name: SIMPLE LEFT REDIR SPECIFIED FD
    input: |
        echo Hello 1> file
        cat < file
        rm file
    checks:
        -   stdout
        -   exitcode

-   name: REDIRECTION ERROR MISSING RIGHT
    input: |
        echo Hello >
    checks:
        -   stdout
        -   exitcode
        -   has_stderr

-   name: REDIRECTION ERROR INVALID REDIR
    input: |
        echo Hello >>>file
    checks:
        -   stdout
        -   exitcode
        -   has_stderr

-   name: REDIRECTION AMPERSAND LEFT
    input: |
        echo Hello >&2
    checks:
        -   stdout
        -   exitcode
        -   has_stderr

-   name: REDIRECTION AMPERSAND LEFT INVALID FD
    input: |
        echo Hello >&42
    checks:
        -   stdout
        -   exitcode
        -   has_stderr

-   name: REDIRECTION AMPERSAND INVALID FD
    input: |
        echo Hello >&42
    checks:
        -   stdout
        -   exitcode
        -   has_stderr

-   name: APPEND LEFT REDIR
    input: |
        echo Hello > file
        echo World >> file
        cat file
        rm file
    checks:
        -   stdout
        -   exitcode

-   name: PIPE REDIR
    input: |
        echo test >| file
        cat file
        rm file
    checks:
        -   stdout
        -   exitcode

-   name: PIPE REDIR STICKED
    input: |
        echo test>| file
        cat file
        rm file
    checks:
        -   stdout
        -   exitcode

-   name: REDIR <> TO STDOUT
    input: |
        echo test <>1
    checks:
        -   stdout
        -   exitcode
